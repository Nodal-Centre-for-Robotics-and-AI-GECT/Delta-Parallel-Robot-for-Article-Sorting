# -*- coding: utf-8 -*-
"""inverse_kinematics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W18YDTaIPTMWVqVDlbLSC8Us8nK-LcGG
"""

import math as maths
import numpy as np

e = 55     # end effector
f = 110    # base
re = 600   # forearm
rf = 300   # arm
stat = 0

def  delta_calcAngleYZ(x0,y0,z0):

    global e,f,re,rf
     
    y1 = -0.5 * 0.57735 * f 
    #float y1 = yy1;
    y0 -= 0.5 * 0.57735 * e   # shift center to edge
    # z = a + b*y
    a = (x0*x0 + y0*y0 + z0*z0 + rf*rf - re*re - y1*y1)/(2*z0)
    b = (y1-y0)/z0
    # discriminant
    d = -(a + b*y1)*(a + b*y1) + rf*(b*b*rf + rf)
    if (d < 0): 
          return 0
    
    yj = (y1 - a*b - maths.sqrt(d))/(b*b + 1) # choosing outer point
    zj = a + b*yj
   
    theta = 180.0*maths.atan(-zj/(y1 - yj))/maths.pi
   
    if yj>y1:
              theta += 180.0
    if (theta < -42) or (theta > 90):
             stat = -1;
    return theta        
  

if __name__ == '__main__':
    while 1:
      x0 = input('X = ')
      y0 = input('Y = ')
      z0 = input('Z = ')

      x0 = float(x0)
      y0 = float(y0)
      z0 = float(z0)

      #x0 = 50
      #y0 = 50
      #z0 = -500
      
      cos120 = maths.cos(2.0*maths.pi/3.0)
      sin120 = maths.sin(2.0*maths.pi/3.0)

      
      theta1 = delta_calcAngleYZ(x0, y0, z0)
      theta2 = delta_calcAngleYZ(x0*cos120 + y0*sin120, y0*cos120-x0*sin120, z0)  # rotate coords to +120 deg
      theta3 = delta_calcAngleYZ(x0*cos120 - y0*sin120, y0*cos120+x0*sin120, z0)  # rotate coords to -120 deg

          
    
      if stat == -1:
        print('Non existing point')
      else: 
        print(theta1)
        print(theta2)
        print(theta3)
